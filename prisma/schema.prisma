// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  role         Role      @default(CLIENT)
  barbershopId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  services     Service[] @relation("BarberServices")
  bookings     Booking[] @relation("ClientBookings")
  ownedShop  Barbershop? @relation("BarbershopOwner")
  barbershop Barbershop? @relation("BarbershopBarbers", fields: [barbershopId], references: [id])
}

model Barbershop {
  id        String   @id @default(uuid())
  name      String
  ownerId   String   @unique
  invites   Invite[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  barbers User[] @relation("BarbershopBarbers")
  owner   User   @relation("BarbershopOwner", fields: [ownerId], references: [id])
}

model Invite {
  id           String   @id @default(uuid())
  code         String   @unique
  barbershopId String
  expiresAt    DateTime
  used         Boolean  @default(false)
  createdAt    DateTime @default(now())
  expired      Boolean? @default(false)

  barbershop Barbershop @relation(fields: [barbershopId], references: [id])
}

model Service {
  id        String    @id @default(uuid())
  name      String
  price     Float
  duration  Int
  barberId  String
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  barber User @relation("BarberServices", fields: [barberId], references: [id])
}

model Booking {
  id        String        @id @default(uuid())
  clientId  String
  serviceId String
  date      DateTime
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  service Service @relation(fields: [serviceId], references: [id])
  client  User    @relation("ClientBookings", fields: [clientId], references: [id])
}

enum Role {
  CLIENT
  BARBER
  OWNER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}
