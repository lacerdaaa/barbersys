// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  role         Role      @default(CLIENT)
  barbershopId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Booking      Booking[]

  bookings   Booking[]   @relation("ClientBookings")
  ownedShop  Barbershop? @relation("BarbershopOwner")
  barbershop Barbershop? @relation("BarbershopBarbers", fields: [barbershopId], references: [id])
  services   Service[]   @relation("BarberServices")
  Service    Service?    @relation(fields: [serviceId], references: [id])
  serviceId  String?
}

model Barbershop {
  id          String    @id @default(uuid())
  name        String
  address     String?
  latitude    Float?
  longitude   Float?
  phone       String?
  description String?
  ownerId     String    @unique
  invites     Invite[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]

  barbers  User[]    @relation("BarbershopBarbers")
  owner    User      @relation("BarbershopOwner", fields: [ownerId], references: [id])
  bookings Booking[]
}

model Invite {
  id           String   @id @default(uuid())
  code         String   @unique
  barbershopId String
  expiresAt    DateTime
  used         Boolean  @default(false)
  createdAt    DateTime @default(now())
  expired      Boolean? @default(false)

  barbershop Barbershop @relation(fields: [barbershopId], references: [id])
}

model Service {
  id           String    @id @default(uuid())
  barbershopId String
  name         String
  price        Float
  duration     Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  barbersIds   User[]
  bookings     Booking[]

  barbershop Barbershop @relation(fields: [barbershopId], references: [id])
  barbers    User[]     @relation("BarberServices")
}

model Booking {
  id           String        @id @default(uuid())
  clientId     String
  barberId     String
  serviceId    String
  barbershopId String
  date         DateTime
  status       BookingStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  client     User       @relation("ClientBookings", fields: [clientId], references: [id])
  barber     User       @relation(fields: [barberId], references: [id])
  service    Service    @relation(fields: [serviceId], references: [id])
  barbershop Barbershop @relation(fields: [barbershopId], references: [id])
}

enum Role {
  CLIENT
  BARBER
  OWNER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}
